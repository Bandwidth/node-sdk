/* tslint:disable */
/* eslint-disable */
/**
 * Bandwidth
 * Bandwidth\'s Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CodeRequest } from '../models';
// @ts-ignore
import { MessagingCodeResponse } from '../models';
// @ts-ignore
import { MfaForbiddenRequestError } from '../models';
// @ts-ignore
import { MfaRequestError } from '../models';
// @ts-ignore
import { MfaUnauthorizedRequestError } from '../models';
// @ts-ignore
import { VerifyCodeRequest } from '../models';
// @ts-ignore
import { VerifyCodeResponse } from '../models';
// @ts-ignore
import { VoiceCodeResponse } from '../models';
/**
 * MFAApi - axios parameter creator
 * @export
 */
export const MFAApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send an MFA code via text message (SMS).
         * @summary Messaging Authentication Code
         * @param {string} accountId Your Bandwidth Account ID.
         * @param {CodeRequest} codeRequest MFA code request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMessagingCode: async (accountId: string, codeRequest: CodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('generateMessagingCode', 'accountId', accountId)
            // verify required parameter 'codeRequest' is not null or undefined
            assertParamExists('generateMessagingCode', 'codeRequest', codeRequest)
            const localVarPath = `/accounts/{accountId}/code/messaging`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(codeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send an MFA Code via a phone call.
         * @summary Voice Authentication Code
         * @param {string} accountId Your Bandwidth Account ID.
         * @param {CodeRequest} codeRequest MFA code request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVoiceCode: async (accountId: string, codeRequest: CodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('generateVoiceCode', 'accountId', accountId)
            // verify required parameter 'codeRequest' is not null or undefined
            assertParamExists('generateVoiceCode', 'codeRequest', codeRequest)
            const localVarPath = `/accounts/{accountId}/code/voice`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(codeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify a previously sent MFA code.
         * @summary Verify Authentication Code
         * @param {string} accountId Your Bandwidth Account ID.
         * @param {VerifyCodeRequest} verifyCodeRequest MFA code verify request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCode: async (accountId: string, verifyCodeRequest: VerifyCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('verifyCode', 'accountId', accountId)
            // verify required parameter 'verifyCodeRequest' is not null or undefined
            assertParamExists('verifyCode', 'verifyCodeRequest', verifyCodeRequest)
            const localVarPath = `/accounts/{accountId}/code/verify`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MFAApi - functional programming interface
 * @export
 */
export const MFAApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MFAApiAxiosParamCreator(configuration)
    return {
        /**
         * Send an MFA code via text message (SMS).
         * @summary Messaging Authentication Code
         * @param {string} accountId Your Bandwidth Account ID.
         * @param {CodeRequest} codeRequest MFA code request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateMessagingCode(accountId: string, codeRequest: CodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagingCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateMessagingCode(accountId, codeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MFAApi.generateMessagingCode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Send an MFA Code via a phone call.
         * @summary Voice Authentication Code
         * @param {string} accountId Your Bandwidth Account ID.
         * @param {CodeRequest} codeRequest MFA code request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateVoiceCode(accountId: string, codeRequest: CodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateVoiceCode(accountId, codeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MFAApi.generateVoiceCode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Verify a previously sent MFA code.
         * @summary Verify Authentication Code
         * @param {string} accountId Your Bandwidth Account ID.
         * @param {VerifyCodeRequest} verifyCodeRequest MFA code verify request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyCode(accountId: string, verifyCodeRequest: VerifyCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyCode(accountId, verifyCodeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MFAApi.verifyCode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MFAApi - factory interface
 * @export
 */
export const MFAApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MFAApiFp(configuration)
    return {
        /**
         * Send an MFA code via text message (SMS).
         * @summary Messaging Authentication Code
         * @param {string} accountId Your Bandwidth Account ID.
         * @param {CodeRequest} codeRequest MFA code request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMessagingCode(accountId: string, codeRequest: CodeRequest, options?: any): AxiosPromise<MessagingCodeResponse> {
            return localVarFp.generateMessagingCode(accountId, codeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Send an MFA Code via a phone call.
         * @summary Voice Authentication Code
         * @param {string} accountId Your Bandwidth Account ID.
         * @param {CodeRequest} codeRequest MFA code request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVoiceCode(accountId: string, codeRequest: CodeRequest, options?: any): AxiosPromise<VoiceCodeResponse> {
            return localVarFp.generateVoiceCode(accountId, codeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify a previously sent MFA code.
         * @summary Verify Authentication Code
         * @param {string} accountId Your Bandwidth Account ID.
         * @param {VerifyCodeRequest} verifyCodeRequest MFA code verify request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCode(accountId: string, verifyCodeRequest: VerifyCodeRequest, options?: any): AxiosPromise<VerifyCodeResponse> {
            return localVarFp.verifyCode(accountId, verifyCodeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MFAApi - object-oriented interface
 * @export
 * @class MFAApi
 * @extends {BaseAPI}
 */
export class MFAApi extends BaseAPI {
    /**
     * Send an MFA code via text message (SMS).
     * @summary Messaging Authentication Code
     * @param {string} accountId Your Bandwidth Account ID.
     * @param {CodeRequest} codeRequest MFA code request body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApi
     */
    public generateMessagingCode(accountId: string, codeRequest: CodeRequest, options?: AxiosRequestConfig) {
        return MFAApiFp(this.configuration).generateMessagingCode(accountId, codeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send an MFA Code via a phone call.
     * @summary Voice Authentication Code
     * @param {string} accountId Your Bandwidth Account ID.
     * @param {CodeRequest} codeRequest MFA code request body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApi
     */
    public generateVoiceCode(accountId: string, codeRequest: CodeRequest, options?: AxiosRequestConfig) {
        return MFAApiFp(this.configuration).generateVoiceCode(accountId, codeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify a previously sent MFA code.
     * @summary Verify Authentication Code
     * @param {string} accountId Your Bandwidth Account ID.
     * @param {VerifyCodeRequest} verifyCodeRequest MFA code verify request body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApi
     */
    public verifyCode(accountId: string, verifyCodeRequest: VerifyCodeRequest, options?: AxiosRequestConfig) {
        return MFAApiFp(this.configuration).verifyCode(accountId, verifyCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

